"""
Django settings for backend_main project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


############
# Env Config
############
POSTGRES_URL = config("POSTGRES_HOST", "not-set")
POSTGRES_DB = config("POSTGRES_DB", "not-set")
POSTGRES_PORT = config("POSTGRES_PORT", "not-set")
POSTGRES_USER = config("POSTGRES_USER", "not-set")
POSTGRES_PASSWORD = config("POSTGRES_PASSWORD", "not-set")
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", "not-set")

ALLOWED_HOSTS = ["*", ]

# SECURE_SSL_REDIRECT = True

# Application definition

INSTALLED_APPS = [
    # Third Party Apps
    "drf_yasg",
    "corsheaders",
    "rest_framework",
    "sslserver",
    "storages",
    'authentication',
   # 'notifications',

    # Default Apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",


]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "backend_main.middleware.ErrorHandlerMiddleware",
    "backend_main.middleware.JsonRequestMiddleware"

]

ROOT_URLCONF = "backend_main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=15),
    "ROTATE_REFRESH_TOKENS": True,
}
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated", "rest_framework.permissions.DjangoModelPermissions"),
    "UNAUTHENTICATED_USER": None,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFAULT_PAGINATION_CLASS": "utils.custom_pagination.CustomPageNumberPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
        "rest_framework.filters.SearchFilter",
    ],
}

AUTH_USER_MODEL = "authentication.Account"  # Implementing Custom User Model

WSGI_APPLICATION = "backend_main.wsgi.application"

ASGI_APPLICATION = 'backend_main.asgi.application'

# CORS_ALLOWED_ORIGINS = [
#     "https://sunset.dev.horizondigital.au",
# ]
CORS_ORIGIN_ALLOW_ALL = True

CSRF_TRUSTED_ORIGINS = ["https://sunset.dev.horizondigital.au", ]

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_DB,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "HOST": POSTGRES_URL,  # Use the IP address of the PostgreSQL service
        "PORT": POSTGRES_PORT,
    }
}


LOGGING_DIR = '/app_code/logs'  # Use an absolute path in the Docker environment
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'debug.log'),
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# S3 BUCKETS CONFIG
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", '')
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", '')
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME", '')
AWS_LOCATION = "static"
AWS_PUBLIC_MEDIA_LOCATION = "media/public"
AWS_DEFAULT_ACL = None
AWS_PRIVATE_MEDIA_LOCATION = "media/private"
PRIVATE_FILE_STORAGE = "wa_utilities.storage_backends.MediaStorage"

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]



# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Australia/Perth"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

##### Email Configuration ####
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = config("EMAIL_USE_TLS", "not-set")
EMAIL_HOST = config("EMAIL_HOST", "not-set")
EMAIL_PORT = config("EMAIL_PORT", "not-set")
EMAIL_HOST_USER = config("EMAIL_HOST_USER", "not-set")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", "not-set")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", "not-set")

SCHEDULER_CONFIG = {
    "apscheduler.jobstores.default": {
        "class": "django_apscheduler.jobstores:DjangoJobStore"
    },
    'apscheduler.executors.processpool': {
        "type": "threadpool"
    },
    "apscheduler.timezone": "Australia/Perth",
}
SCHEDULER_AUTOSTART = False

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}







FRONTEND_DEV_URL = config("FRONTEND_DEV_URL", "not-set")
FRONTEND_PROD_URL = config("FRONTEND_PROD_URL", "not-set")



MAIL_BOX_LAYER_KEY = config("MAIL_BOX_LAYER_KEY", "not-set")